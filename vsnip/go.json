{
  "type function declaration": {
    "prefix": "tyf",
    "body": "type ${1:name} func($3) $4",
    "description": "Snippet for a type function declaration"
  },
  "type interface declaration": {
    "prefix": "tyi",
    "body": "type ${1:name} interface {\n\t$0\n}",
    "description": "Snippet for a type interface"
  },
  "type struct declaration": {
    "prefix": "tys",
    "body": "type ${1:name} struct {\n\t$0\n}",
    "description": "Snippet for a struct declaration"
  },
  "import": {
    "prefix": "im",
    "body": "import \"$0\"",
    "description": "import"
  },
 "function declaration": {
    "prefix": "func",
    "body": "func $1($2) $3 {\n\t$0\n}",
    "description": "Snippet for function declaration"
  },
  "variable declaration": {
    "prefix": "var",
    "body": "var ${1:name} ${2:type}",
    "description": "Snippet for a variable"
  },
  "for statement": {
    "prefix": "for",
    "body": "for ${1}{\n\t$0\n}",
    "description": "Snippet for a pure for loop"
  },
  "for n statement": {
    "prefix": "fori",
    "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
    "description": "Snippet for a for loop"
  },
  "for range statement": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
    "description": "Snippet for a for range loop"
  },
  "map declaration": {
    "prefix": "map",
    "body": "map[${1:type}]${2:type}",
    "description": "Snippet for a map"
  },
  "empty interface": {
    "prefix": "in",
    "body": "interface{}",
    "description": "Snippet for empty interface"
  },
  "if statement": {
    "prefix": "if",
    "body": "if ${1:condition} {\n\t$0\n}",
    "description": "Snippet for if statement"
  },
  "if err != nil": {
    "prefix": "ir",
    "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
    "description": "Snippet for if err != nil"
  },
  "fmt.Println": {
    "prefix": "fp",
    "body": "fmt.Println(\"$TM_SELECTED_TEXT\")",
    "description": "Snippet for fmt.Println()"
  },
  "fmt.Printf": {
    "prefix": "ff",
    "body": "fmt.Printf(\"$1\", ${2:var})",
    "description": "Snippet for fmt.Printf()"
  },
  "fmt.Sprintf": {
    "prefix": "sf",
    "body": "fmt.Sprintf(\"$1\", ${2:var})",
    "description": "Snippet for fmt.Sprintf()"
  },
  "goroutine anonymous function": {
    "prefix": "go",
    "body": "go func($1) {\n\t$0\n}($2)",
    "description": "Snippet for anonymous goroutine declaration"
  },
  "goroutine function": {
    "prefix": "gf",
    "body": "go ${1:func}($0)",
    "description": "Snippet for goroutine declaration"
  },
  "method declaration": {
    "prefix": ["meth", "fum"],
    "body": "func (${1:r} *${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
    "description": "Snippet for method declaration"
  },
  "test function": {
    "prefix": "tf",
    "body": "func Test$1(t *testing.T) {\n\t$0\n}",
    "description": "Snippet for Test function"
  },
  "test main": {
    "prefix": "tm",
    "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
    "description": "Snippet for TestMain function"
  },
  "table driven test": {
    "prefix": "tdt",
    "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
    "description": "Snippet for table driven test"
  },
  "package main, main and run function": {
    "prefix": "pkgm",
    "body": [
        "package main\n",
        "import (\n\t\"fmt\"\n\t\"os\"\n)\n",
        "func main() {",
            "\tif err := run(os.Args); err != nil {",
            "\t\tfmt.Fprintf(os.Stderr, \"%s\\n\", err)\n\t\ttos.Exit(1)",
            "\t}\n}\n\n",
        "func run(args []string) error {",
            "\t$0",
            "\treturn nil",
        "}"
        ],
    "description": "Snippet for main package & function"
  },
  "if key in a map": {
	"prefix": "om",
	"body": "if ${1:value}, ok := ${2:map}[${3:key}]; ok {\n\t$4\n}"
  }
}
